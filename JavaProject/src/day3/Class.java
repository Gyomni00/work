
/*Class의 구성요소
 
1.	Field 
	- 객체 생성 후 '지속적으로' 사용되어지는 변수 / 보통 제일 위에 작성
	- 객체가 생성될 때 만들어지고, 객체가 사라질 때 사라짐
	- 접근지정자 : 주로 private를 사용 -> 외부에서 접근 사용 불가
	- static(class 타입 전체에 하나만 생성하여 공유 사용할 때 사용), final(변수는 메모리공간인데 -> 상수화가 되어 값 변경 불가, 읽기전용 ex) Digi Campus라는 과정 이름)
	- 종류 : instance field, static field
	- 형태 : private int a;, private char b; 등
	
2.	Constructor(생성자함수) 
	- 객체 생성시 자동 호출되어지는 함수(딱 1번만, 더 이상 호출 불가)
	- 생성자함수를 명시적으로 제공하지 않을경우 디폴트생성자를 제공(보이지 않아도 디폴트생성자가 있음)
	- 리턴타입이 존재하지 않고, 함수명은 클래스명과 동일(원래 메소드는 첫글자 소문자인데, 얘는 메소드임에도 예외적으로 클래스명과 동일하게 대문자로 작성됨)
	- 기능
		1. 디폴트기능 : 객체등록
		2. 사용자기능 : 객체생성시 필드초기화 -> 시작시 객체에 원하는 값을 입력 가능(원래는 0으로 시작하는데 다른 값으로 시작 가능)
	- 오버로딩 가능 : 한개가 아니라 여러개를 만들 수 있음 
	- 접근지정자 : 주로 public 사용
	- 디폴트생성자를 명시적으로 만들경우 숨어있는 디폴트는 제공하지 않는다.(디폴트가 두 개 제공되어지니까)
	- 명시적으로 생성자를 하나 이상 만들경우(오버로딩) 디폴트는 제공하지 않는다.
			
3.	Method   
	- 외부에서 내부의 필드를 접근해서 사용할 수 있게 하기 위해 사용 : field 관리 목적
	- 접근지정자 : 주로 public 사용 
	- class 안에 한 파트기 때문에 객체가 사라져도 method는 사라지지 않음 -> 단발적으로 쓸 것
	- 종류 : instance method(생성해야 사용 가능, this 있어서 구분 가능), static method(생성없이 사용 가능, this 없어서 구분 불가능-애초에 공유사용이므로 구분필요 x) 
			 -> 가장 큰 문법적인 차이점은 this 여부. this가 객체를 구분해줌
	- 오버로딩 가능  : 동일한 함수명으로 여러개의 함수를 만들어서 제공하는 것 : 다형성 (시험 꼭 !! 출제)
					같은 기능을 수행하는 것을 하나의 이름으로 묶어서 제공하여 사용자의 편리성 제공
			 		함수명을 동일하게 하면서 (매개변수=인자=agument)를 구분 할 수 있어야 한다.
			 		매개변수 구분할 수 있는 경우(들 증 하나라도 포함될 경우 구분가능)
		 				1. 매개변수 개수가 다를 경우
		 				2. 매개변수 타입이 다를 경우 ex)int 1개, char 1개 -> 동일한 개수여도 구분 가능	*/


	
	